{"version":3,"sources":["serviceWorker.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/progressBar.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/astar.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingAlgorithms/randomWalk.js","pathfindingAlgorithms/greedyBestFirstSearch.js","pathfindingAlgorithms/bidirectionalGreedySearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js"],"names":["Boolean","window","location","hostname","match","walls","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","onMouseLeave","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","ProgressBar","visitedNodes","shortestNodes","title","value","color","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","clearTemp","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","visualizeBidirectionalGreedySearch","visualizeBFS","visualizeDFS","visualizeRandomWalk","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","speed","updateSpeed","href","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","selectAlgorithm","visualizeAlgorithm","selectMaze","generateMaze","changeSpeed","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","getRandomNeighbour","neighboursFilteredStartAndWall","neighboursFilteredVisited","random","numNodesVisited","count","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","i","array","max","randomNum","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","initialNum","getInitialNum","innerHeight","initialNumRows","initialNumColumns","startFinishNode","randomNums","x","y","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getRandomNums","getStartFinishNode","PathfindingVisualizer","mouseIsPressed","mazeSpeed","updateDimensions","path","animateShortestPath","nodesInShortestPathOrder","setTimeout","newGrid","updateNodesForRender","document","getElementById","animateAlgorithm","newNode","animateRandomWalk","animateMaze","getNewGridWithMaze","addEventListener","getInitialGrid","mainIsPressed","gridWithWallToggled","gridDynamicNodes","startNode_Pos","finishNode_Pos","getGridWithoutPath","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","getVisitedNodesInOrder","undefined","currentNode","unshift","getNodesInShortestPathOrderDijkstra","totalDistance","astar","getNodesInShortestPathOrderAstar","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","nodesVisited","randomWalk","greedyBFS","getNodesInShortestPathOrderGreedyBFS","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","animateBidirectionalAlgorithm","randomMaze","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","randomNums1","randomNums2","currentRow","createNode","distanceToFinishNode","n","pos","console","log","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b3f0302.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let walls;\r\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let dir;\r\n  let num;\r\n  if (vertical.length > horizontal.length) {\r\n    dir = 0;\r\n    num = generateOddRandomNumber(vertical);\r\n  }\r\n  if (vertical.length <= horizontal.length) {\r\n    dir = 1;\r\n    num = generateOddRandomNumber(horizontal);\r\n  }\r\n\r\n  if (dir === 0) {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical.slice(0, vertical.indexOf(num)),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical.slice(vertical.indexOf(num) + 1),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  } else {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(0, horizontal.indexOf(num)),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(horizontal.indexOf(num) + 1),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  }\r\n}\r\n\r\nfunction generateOddRandomNumber(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (dir === 0) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === startNode.row && num === startNode.col) ||\r\n        (temp === finishNode.row && num === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if (\r\n        (num === startNode.row && temp === startNode.col) ||\r\n        (num === finishNode.row && temp === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 !== 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return randomNum;\r\n}\r\n","let walls;\r\nexport function verticalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (vertical.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of vertical) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of horizontal) {\r\n    if (\r\n      (temp === startNode.row && num === startNode.col) ||\r\n      (temp === finishNode.row && num === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([temp, num]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","let walls;\r\nexport function horizontalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (horizontal.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of horizontal) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, vertical, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of vertical) {\r\n    if (\r\n      (num === startNode.row && temp === startNode.col) ||\r\n      (num === finishNode.row && temp === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([num, temp]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      isVisited,\r\n      isShortest,\r\n      onMouseEnter,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onMouseLeave,\r\n      width,\r\n      height,\r\n      numRows,\r\n      numColumns,\r\n    } = this.props;\r\n\r\n    const extraClass = isStart\r\n      ? \"node node-start\"\r\n      : isFinish\r\n      ? \"node node-finish\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isShortest\r\n      ? \"node node-shortest-path\"\r\n      : isVisited\r\n      ? \"node node-visited\"\r\n      : \"node\";\r\n\r\n    let cellWidth = Math.floor((width - 25) / numColumns);      //15\r\n    let cellHeight;\r\n    if (width > 1500) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 1000) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 500) {\r\n      cellHeight = Math.floor((height - 60) / numRows);\r\n    } else if (width > 0) {\r\n      cellHeight = Math.floor((height - 50) / numRows);\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`${extraClass}`}\r\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        onMouseLeave={() => onMouseLeave(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport { Progress } from \"reactstrap\";\r\nimport \"./progressBar.css\";\r\n\r\nconst ProgressBar = (props) => {\r\n    const { visitedNodes, shortestNodes } = props;\r\n    return ( \r\n        <div>\r\n            <div className=\"visited-nodes-bar\" title=\"Visited Node\">\r\n                visited nodes: {visitedNodes === \"0\" ? \"0\" : visitedNodes}\r\n                <Progress value={(visitedNodes / 800)*100} color=\"danger\" />\r\n            </div>\r\n            <div className=\"shortest-nodes-bar\" title=\"Shortest Node\">\r\n                shortest path: {shortestNodes === \"0\" ? \"0\" : shortestNodes}\r\n                <Progress value={(shortestNodes / 800)*100} color=\"success\" />\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ProgressBar;","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nimport ProgressBar from \"./progressBar\";\r\n\r\n\r\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    algorithm: \"Visualize Algorithm\",\r\n    maze: \"Generate Maze\",\r\n    pathState: false,\r\n    mazeState: false,\r\n    speedState: \"Speed\",\r\n  };\r\n\r\n  selectAlgorithm(selection) {\r\n    if (this.props.visualizingAlgorithm) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.algorithm ||\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: selection });\r\n    } else if (this.state.pathState) {\r\n      this.clearPath();\r\n      this.setState({ algorithm: selection });\r\n    } else {\r\n      this.setState({ algorithm: selection });\r\n    }\r\n  }\r\n\r\n  selectMaze(selection) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.maze ||\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: selection });\r\n    } else if (!this.state.mazeState) {\r\n      this.setState({ maze: selection });\r\n    } else {\r\n      this.clearGrid();\r\n      this.setState({ maze: selection });\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.pathState) {\r\n      this.clearTemp();\r\n      return;\r\n    }\r\n    if (\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: \"Select an Algorithm!\" });\r\n    } else {\r\n      this.setState({ pathState: true });\r\n      if (this.state.algorithm === \"Visualize Dijkstra\")\r\n        this.props.visualizeDijkstra();\r\n      else if (this.state.algorithm === \"Visualize A*\")\r\n        this.props.visualizeAStar();\r\n      else if (this.state.algorithm === \"Visualize Greedy BFS\")\r\n        this.props.visualizeGreedyBFS();\r\n      else if (this.state.algorithm === \"Visualize Bidirectional Greedy\")\r\n        this.props.visualizeBidirectionalGreedySearch();\r\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\r\n        this.props.visualizeBFS();\r\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\r\n        this.props.visualizeDFS();\r\n      else if (this.state.algorithm === \"Visualize Random Walk\")\r\n        this.props.visualizeRandomWalk();\r\n    }\r\n  }\r\n\r\n  generateMaze() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.mazeState || this.state.pathState) {\r\n      this.clearTemp();\r\n    }\r\n    if (\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: \"Select a Maze!\" });\r\n    } else {\r\n      this.setState({ mazeState: true });\r\n      if (this.state.maze === \"Generate Random Maze\")\r\n        this.props.generateRandomMaze();\r\n      else if (this.state.maze === \"Generate Recursive Maze\")\r\n        this.props.generateRecursiveDivisionMaze();\r\n      else if (this.state.maze === \"Generate Vertical Maze\")\r\n        this.props.generateVerticalMaze();\r\n      else if (this.state.maze === \"Generate Horizontal Maze\")\r\n        this.props.generateHorizontalMaze();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      algorithm: \"Visualize Algorithm\",\r\n      maze: \"Generate Maze\",\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearPath();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearTemp() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    let value = [10, 10];\r\n    if (speed === \"Slow\") value = [50, 30];\r\n    else if (speed === \"Medium\") value = [25, 20];\r\n    else if (speed === \"Fast\") value = [10, 10];\r\n    this.setState({ speedState: speed });\r\n    this.props.updateSpeed(value[0], value[1]);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a\r\n          className=\"navbar-brand h1 mb-0\"\r\n          href=\"#\"\r\n        >\r\n          {brand}\r\n        </a>\r\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\r\n                  >\r\n                    Dijkstra's Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize A*\")}\r\n                  >\r\n                    A* Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Greedy BFS\")}\r\n                  >\r\n                    Greedy Best First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Bidirectional Greedy\")\r\n                    }\r\n                  >\r\n                    Bidirectional Greedy Search\r\n                  </button>\r\n                  <div className=\"dropdown-divider\"></div>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\r\n                    }\r\n                  >\r\n                    Breadth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\r\n                    }\r\n                  >\r\n                    Depth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Random Walk\")\r\n                    }\r\n                  >\r\n                    Random Walk\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.visualizeAlgorithm()}\r\n              >\r\n                {this.state.algorithm}\r\n              </button>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Mazes\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\r\n                  >\r\n                    Random Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Recursive Maze\")}\r\n                  >\r\n                    Recursive Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Vertical Maze\")}\r\n                  >\r\n                    Vertical Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}\r\n                  >\r\n                    Horizontal Division Maze\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.generateMaze()}\r\n              >\r\n                {this.state.maze}\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => this.clearGrid()}\r\n              >\r\n                Clear Grid\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => this.clearPath()}\r\n              >\r\n                Clear Path\r\n              </button>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-info dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  {this.state.speedState}\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Slow\")}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Medium\")}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Fast\")}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n            <ProgressBar visitedNodes={this.props.visitedNodes} shortestNodes={this.props.shortestNodes} />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default NavBar;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getNodes(grid);\r\n  let visitedNodesInOrder = [];\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    updateUnvisitedNeighbours(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n    unvisitedNeighbour.distance = node.distance + 1;\r\n    unvisitedNeighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours\r\n    .filter((neighbour) => !neighbour.isWall)\r\n    .filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = g(n) + h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function breadthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\r\n        unvisitedNodes.push(unvisitedNeighbour);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function depthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      unvisitedNodes.unshift(unvisitedNeighbour);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function randomWalk(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let visitedNodesInOrder = [];\r\n  let closestNode = startNode;\r\n  let maxNodes = grid.length * grid[0].length;\r\n  let maxNodesVisitedTracker = 0;\r\n  let loopTracker = 0;\r\n  while (true) {\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\r\n    let nodesVisited = numNodesVisited(grid);\r\n    if (nodesVisited === maxNodes - 2) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nodesVisited > maxNodesVisitedTracker) {\r\n      maxNodesVisitedTracker = nodesVisited;\r\n      loopTracker = 0;\r\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\r\n      loopTracker += 1;\r\n      if (loopTracker > 1000) {\r\n        return visitedNodesInOrder;\r\n      }\r\n    }\r\n    randomNeighbour.previousNode = closestNode;\r\n    closestNode = randomNeighbour;\r\n  }\r\n}\r\n\r\nfunction getRandomNeighbour(node, grid, finishNode) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  let neighboursFilteredStartAndWall = neighbours.filter(\r\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\r\n  );\r\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\r\n    (neighbour) => !neighbour.isVisited\r\n  );\r\n  if (neighboursFilteredVisited.length > 0) {\r\n    return neighboursFilteredVisited[\r\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\r\n    ];\r\n  }\r\n  return neighboursFilteredStartAndWall[\r\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\r\n  ];\r\n}\r\n\r\nfunction numNodesVisited(grid) {\r\n  let count = 0;\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      if (node.isVisited || node.isWall) count += 1;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n","export function greedyBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function bidirectionalGreedySearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodesStart = [];\r\n  let visitedNodesInOrderStart = [];\r\n  let unvisitedNodesFinish = [];\r\n  let visitedNodesInOrderFinish = [];\r\n  startNode.distance = 0;\r\n  finishNode.distance = 0;\r\n  unvisitedNodesStart.push(startNode);\r\n  unvisitedNodesFinish.push(finishNode);\r\n\r\n  while (\r\n    unvisitedNodesStart.length !== 0 &&\r\n    unvisitedNodesFinish.length !== 0\r\n  ) {\r\n    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNodeStart = unvisitedNodesStart.shift();\r\n    let closestNodeFinish = unvisitedNodesFinish.shift();\r\n\r\n    closestNodeStart.isVisited = true;\r\n    closestNodeFinish.isVisited = true;\r\n    visitedNodesInOrderStart.push(closestNodeStart);\r\n    visitedNodesInOrderFinish.push(closestNodeFinish);\r\n    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\r\n      return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n    }\r\n\r\n    //Start side search\r\n    let neighbours = getNeighbours(closestNodeStart, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        visitedNodesInOrderStart.push(closestNodeStart);\r\n        visitedNodesInOrderFinish.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeStart.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        unvisitedNodesStart.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      }\r\n    }\r\n\r\n    //Finish side search\r\n    neighbours = getNeighbours(closestNodeFinish, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        visitedNodesInOrderStart.push(closestNodeFinish);\r\n        visitedNodesInOrderStart.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeFinish.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        unvisitedNodesFinish.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      }\r\n    }\r\n  }\r\n  return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\r\n}\r\n\r\nfunction isNeighbour(closestNodeStart, closestNodeFinish) {\r\n  let rowStart = closestNodeStart.row;\r\n  let colStart = closestNodeStart.col;\r\n  let rowFinish = closestNodeFinish.row;\r\n  let colFinish = closestNodeFinish.col;\r\n  if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart + 1) return true;\r\n  if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart - 1) return true;\r\n  return false;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(nodeA, nodeB) {\r\n  let x = Math.abs(nodeA.row - nodeB.row);\r\n  let y = Math.abs(nodeA.col - nodeB.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\r\n  nodeA,\r\n  nodeB\r\n) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = nodeB;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  currentNode = nodeA;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./pathfindingVisualizer.css\";\r\nimport Node from \"./Node/node\";\r\nimport NavBar from \"./navbar\";\r\n\r\n//Pathfinding Algorithms\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../pathfindingAlgorithms/dijkstra\";\r\nimport {\r\n  astar,\r\n  getNodesInShortestPathOrderAstar,\r\n} from \"../pathfindingAlgorithms/astar\";\r\nimport {\r\n  breadthFirstSearch,\r\n  getNodesInShortestPathOrderBFS,\r\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\r\nimport {\r\n  depthFirstSearch,\r\n  getNodesInShortestPathOrderDFS,\r\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\r\nimport { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\r\nimport {\r\n  greedyBFS,\r\n  getNodesInShortestPathOrderGreedyBFS,\r\n} from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\r\nimport {\r\n  bidirectionalGreedySearch,\r\n  getNodesInShortestPathOrderBidirectionalGreedySearch,\r\n} from \"../pathfindingAlgorithms/bidirectionalGreedySearch\";\r\n// import { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\r\n\r\n//Maze Algorithms\r\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\r\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\r\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\r\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\r\n\r\n// const START_NODE_ROW = 10;\r\n// const START_NODE_COL = 15;\r\n// const FINISH_NODE_ROW = 10;\r\n// const FINISH_NODE_COL = 35;\r\n\r\nlet initialNum = getInitialNum(window.innerWidth, window.innerHeight);\r\nlet initialNumRows = initialNum[0];\r\nlet initialNumColumns = initialNum[1];\r\n\r\nlet startFinishNode = getStartFinishNode(initialNumRows, initialNumColumns);    //const\r\nlet startNodeCol = startFinishNode[1];                                          //const\r\nlet startNodeRow = startFinishNode[0];                                          //const\r\nlet finishNodeCol = startFinishNode[3];                                         //const\r\nlet finishNodeRow = startFinishNode[2];                                         //const\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    mouseIsPressed: false,\r\n    visualizingAlgorithm: false,\r\n    generatingMaze: false,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    numRows: initialNumRows,\r\n    numColumns: initialNumColumns,\r\n    visitedNodes: 0,        //\r\n    shortestNodes: 0,       //\r\n    speed: 10,\r\n    mazeSpeed: 10,\r\n  };\r\n\r\n  updateDimensions = () => {\r\n    this.setState({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  updateSpeed = (path, maze) => {\r\n    this.setState({ speed: path, mazeSpeed: maze });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({ grid });\r\n  }\r\n  //tool tips toggle\r\n\r\n  ///////////////\r\n  handleMouseDown(row, col) {\r\n    const { grid, mainIsPressed } = this.state;\r\n    const node = grid[row][col];\r\n    if (node.isStart === true && node.isFinish === false) {\r\n      this.setState({ mainIsPressed: \"start\" });\r\n      node.isStart = false;\r\n    }\r\n    if (node.isFinish === true && node.isStart === false) {\r\n      this.setState({ mainIsPressed: \"finish\" });\r\n      node.isFinish = false;\r\n    }\r\n    if (mainIsPressed === \"\") {\r\n      const newGrid = gridWithWallToggled(grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n  //griddynamicNodes\r\n\r\n  handleMouseEnter(row, col) {\r\n    const { grid, mouseIsPressed, mainIsPressed } = this.state;\r\n    if (mainIsPressed === \"start\") {\r\n      const newGrid = gridDynamicNodes(grid, row, col, \"start\");\r\n      this.setState({ grid: newGrid });\r\n    }\r\n    if (mainIsPressed === \"finish\") {\r\n      const newGrid = gridDynamicNodes(grid, row, col, \"finish\");\r\n      this.setState({ grid: newGrid });\r\n    }\r\n    if (mouseIsPressed && mainIsPressed === \"\") {\r\n      const newGrid = gridWithWallToggled(grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    const { mainIsPressed, grid } = this.state;\r\n    if (mainIsPressed === \"start\") {\r\n      this.setState({ mainIsPressed: \"\" });\r\n      const startNode_Pos = [row, col];\r\n      const newGrid = gridDynamicNodes(grid, row, col, \"start\");\r\n      this.setState({ mainIsPressed: \"\", startNode_Pos, grid: newGrid });\r\n    }\r\n    if (mainIsPressed === \"finish\") {\r\n      const finishNode_Pos = [row, col];\r\n      const newGrid = gridDynamicNodes(grid, row, col, \"finish\");\r\n      this.setState({ mainIsPressed: \"\", finishNode_Pos, grid: newGrid });\r\n    }\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  handleMouseLeave(row, col) {\r\n    const { grid, mainIsPressed } = this.state;\r\n    if (mainIsPressed === \"\") return;\r\n    let newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    if (mainIsPressed === \"start\") {\r\n      const newNode = {\r\n        ...node,\r\n        isStart: false,\r\n        isWall: false,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n    }\r\n    if (mainIsPressed === \"finish\") {\r\n      const newNode = {\r\n        ...node,\r\n        isFinish: false,\r\n        isWall: false,\r\n      };\r\n      newGrid[row][col] = newNode;\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  /////////////////////////\r\n  clearGrid() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          !(\r\n            (row === startNodeRow && col === startNodeCol) ||\r\n            (row === finishNodeRow && col === finishNodeCol)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n      visitedNodes: 0,      //\r\n      shortestNodes: 0,     //\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-shortest-path\"\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getGridWithoutPath(this.state.grid);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n      visitedNodes: 0,      //\r\n      shortestNodes: 0,     //\r\n    });\r\n  }\r\n\r\n  /////////////////////////\r\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\r\n    if (nodesInShortestPathOrder.length === 1)\r\n      this.setState({ visualizingAlgorithm: false });\r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        setTimeout(() => {\r\n          let newGrid = updateNodesForRender(\r\n            this.state.grid,\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\r\n        }, i * (3 * this.state.speed));\r\n        return;\r\n      }\r\n      let node = nodesInShortestPathOrder[i];\r\n      setTimeout(() => {\r\n        //shortest path node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, i * (3 * this.state.speed));\r\n    }\r\n  };\r\n\r\n  //animate algorithm with speed fucntion\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    let newGrid = this.state.grid.slice();\r\n    for (let row of newGrid) {\r\n      for (let node of row) {\r\n        let newNode = {\r\n          ...node,\r\n          isVisited: false,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * this.state.speed);\r\n    }\r\n  };\r\n\r\n  //animate randomwalk with speed fucntion\r\n  animateRandomWalk = (visitedNodesInOrder) => {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ visualizingAlgorithm: false });\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          //finish node\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-finish-reached\";\r\n        }, i * this.state.speed);\r\n        continue;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * this.state.speed);\r\n    }\r\n  };\r\n\r\n  animateBidirectionalAlgorithm(\r\n    visitedNodesInOrderStart,\r\n    visitedNodesInOrderFinish,\r\n    nodesInShortestPathOrder,\r\n    isShortedPath\r\n  ) {\r\n    let len = Math.max(\r\n      visitedNodesInOrderStart.length,\r\n      visitedNodesInOrderFinish.length\r\n    );\r\n    for (let i = 1; i <= len; i++) {\r\n      let nodeA = visitedNodesInOrderStart[i];\r\n      let nodeB = visitedNodesInOrderFinish[i];\r\n      if (i === visitedNodesInOrderStart.length) {\r\n        setTimeout(() => {\r\n          let visitedNodesInOrder = getVisitedNodesInOrder(\r\n            visitedNodesInOrderStart,\r\n            visitedNodesInOrderFinish\r\n          );\r\n          if (isShortedPath) {\r\n            this.animateShortestPath(\r\n              nodesInShortestPathOrder,\r\n              visitedNodesInOrder\r\n            );\r\n          } else {\r\n            this.setState({ visualizingAlgorithm: false });\r\n          }\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited nodes\r\n        if (nodeA !== undefined)\r\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\r\n            \"node node-visited\";\r\n        if (nodeB !== undefined)\r\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\r\n            \"node node-visited\";\r\n      }, i * this.state.speed);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderDijkstra(finishNode);\r\n      this.setState({\r\n          shortestNodes: nodesInShortestPathOrder.length,\r\n          visitedNodes: visitedNodesInOrder.length\r\n      });\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderAstar(finishNode);\r\n      this.setState({\r\n          shortestNodes: nodesInShortestPathOrder.length,\r\n          visitedNodes: visitedNodesInOrder.length\r\n      });\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = breadthFirstSearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderBFS(finishNode);\r\n      this.setState({\r\n          shortestNodes: nodesInShortestPathOrder.length,\r\n          visitedNodes: visitedNodesInOrder.length\r\n      });\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderDFS(finishNode);\r\n      this.setState({\r\n          shortestNodes: nodesInShortestPathOrder.length,\r\n          visitedNodes: visitedNodesInOrder.length\r\n      });\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeRandomWalk() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\r\n      // this.setState({\r\n      //   //shortestNodes: nodesInShortestPathOrder.length,\r\n        // visitedNodes: visitedNodesInOrder.length\r\n      // });\r\n      this.animateRandomWalk(visitedNodesInOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeGreedyBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderGreedyBFS(finishNode);\r\n      this.setState({\r\n        shortestNodes: nodesInShortestPathOrder.length,\r\n        visitedNodes: visitedNodesInOrder.length\r\n      });\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeBidirectionalGreedySearch() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = bidirectionalGreedySearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\r\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\r\n      const isShortedPath = visitedNodesInOrder[2];\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderBidirectionalGreedySearch(\r\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\r\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\r\n        );\r\n      this.setState({\r\n        shortestNodes: nodesInShortestPathOrder.length,\r\n        visitedNodes: visitedNodesInOrder.length\r\n      });\r\n      this.animateBidirectionalAlgorithm(\r\n        visitedNodesInOrderStart,\r\n        visitedNodesInOrderFinish,\r\n        nodesInShortestPathOrder,\r\n        isShortedPath\r\n      );\r\n    }, this.state.speed);\r\n  }\r\n\r\n  animateMaze = (walls) => {\r\n    for (let i = 0; i <= walls.length; i++) {\r\n      if (i === walls.length) {\r\n        setTimeout(() => {\r\n          this.clearGrid();\r\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\r\n          this.setState({ grid: newGrid, generatingMaze: false });\r\n        }, i * this.state.mazeSpeed);\r\n        return;\r\n      }\r\n      let wall = walls[i];\r\n      let node = this.state.grid[wall[0]][wall[1]];\r\n      setTimeout(() => {\r\n        //Walls\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-wall-animated\";\r\n      }, i * this.state.mazeSpeed);\r\n    }\r\n  };\r\n\r\n  generateRandomMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = randomMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  generateRecursiveDivisionMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  generateVerticalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = verticalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  generateHorizontalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = horizontalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  render() {\r\n    let { grid, visitedNodes, shortestNodes } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        {/* Things under navbar which should hide or not */}\r\n        <NavBar\r\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\r\n          generatingMaze={this.state.generatingMaze}\r\n          visualizeDijkstra={this.visualizeDijkstra.bind(this)}\r\n          visualizeAStar={this.visualizeAStar.bind(this)}\r\n          visualizeGreedyBFS={this.visualizeGreedyBFS.bind(this)}\r\n          visualizeBidirectionalGreedySearch={this.visualizeBidirectionalGreedySearch.bind(\r\n            this\r\n          )}\r\n          visualizeBFS={this.visualizeBFS.bind(this)}\r\n          visualizeDFS={this.visualizeDFS.bind(this)}\r\n          visualizeRandomWalk={this.visualizeRandomWalk.bind(this)}\r\n          generateRandomMaze={this.generateRandomMaze.bind(this)}\r\n          generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(\r\n            this\r\n          )}\r\n          generateVerticalMaze={this.generateVerticalMaze.bind(this)}\r\n          generateHorizontalMaze={this.generateHorizontalMaze.bind(this)}\r\n          clearGrid={this.clearGrid.bind(this)}\r\n          clearPath={this.clearPath.bind(this)}\r\n          updateSpeed={this.updateSpeed.bind(this)}\r\n          visitedNodes={visitedNodes}     //\r\n          shortestNodes={shortestNodes}   //\r\n        />\r\n        <div\r\n          className={\r\n            this.state.visualizingAlgorithm || this.state.generatingMaze\r\n              ? \"grid-visualizing\"\r\n              : \"grid\"\r\n          }\r\n        >\r\n          {grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId}>\r\n                {row.map((node, nodeId) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isVisited,\r\n                    isShortest,\r\n                    isWall,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeId}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isVisited={isVisited}\r\n                      isShortest={isShortest}\r\n                      isWall={isWall}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp(row, col)}\r\n                      onMouseLeave={(row, col) =>\r\n                        this.handleMouseLeave(row, col)\r\n                      }\r\n                      width={this.state.width}\r\n                      height={this.state.height}\r\n                      numRows={this.state.numRows}\r\n                      numColumns={this.state.numColumns}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getInitialNum(width, height) {\r\n  let numColumns;\r\n  if (width > 1500) {\r\n    numColumns = Math.floor(width / 25);\r\n  } else if (width > 1250) {\r\n    numColumns = Math.floor(width / 22.5);\r\n  } else if (width > 1000) {\r\n    numColumns = Math.floor(width / 20);\r\n  } else if (width > 750) {\r\n    numColumns = Math.floor(width / 17.5);\r\n  } else if (width > 500) {\r\n    numColumns = Math.floor(width / 15);\r\n  } else if (width > 250) {\r\n    numColumns = Math.floor(width / 12.5);\r\n  } else if (width > 0) {\r\n    numColumns = Math.floor(width / 10);\r\n  }\r\n  let cellWidth = Math.floor(width / numColumns);\r\n  let numRows = Math.floor(height / cellWidth);\r\n  return [numRows, numColumns];\r\n}\r\n\r\nfunction getRandomNums(num) {\r\n  let randomNums1 = [];\r\n  let temp = 2;\r\n  for (let i = 5; i < num / 2; i += 2) {\r\n    randomNums1.push(temp);\r\n    temp += 2;\r\n  }\r\n  let randomNums2 = [];\r\n  temp = -2;\r\n  for (let i = num / 2; i < num - 5; i += 2) {\r\n    randomNums2.push(temp);\r\n    temp -= 2;\r\n  }\r\n  return [randomNums1, randomNums2];\r\n}\r\n\r\n//function for random start & finish point at every refresh\r\nfunction getStartFinishNode(numRows, numColumns) {\r\n  let randomNums;\r\n  let x;\r\n  let y;\r\n  let startNodeRow;\r\n  let startNodeCol;\r\n  let finishNodeRow;\r\n  let finishNodeCol;\r\n  if (numRows < numColumns) {\r\n    randomNums = getRandomNums(numRows);\r\n    x = Math.floor(numRows / 2);\r\n    y = Math.floor(numColumns / 4);\r\n    if (x % 2 !== 0) x -= 1;\r\n    if (y % 2 !== 0) y += 1;\r\n    startNodeRow =\r\n      x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\r\n    startNodeCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\r\n    finishNodeRow =\r\n      x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\r\n    finishNodeCol =\r\n      numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\r\n  } else {\r\n    randomNums = getRandomNums(numColumns);\r\n    x = Math.floor(numRows / 4);\r\n    y = Math.floor(numColumns / 2);\r\n    if (x % 2 !== 0) x -= 1;\r\n    if (y % 2 !== 0) y += 1;\r\n    startNodeRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\r\n    startNodeCol =\r\n      y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\r\n    finishNodeRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\r\n    finishNodeCol =\r\n      y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\r\n  }\r\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\r\n}\r\n\r\nconst getInitialGrid = (numRows, numColumns) => {\r\n  let grid = [];\r\n  for (let row = 0; row < numRows; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < numColumns; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  \r\n\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    distance: Infinity,\r\n    totalDistance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    distanceToFinishNode: Math.abs(finishNodeRow - row) + Math.abs(finishNodeCol - col)     //\r\n  };\r\n};\r\n\r\nconst getNewGridWithWalls = (grid, row, col) => {\r\n  let newGrid = grid.slice();\r\n  let node = grid[row][col];\r\n  let newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithMaze = (grid, walls) => {\r\n  let newGrid = grid.slice();\r\n  for (let wall of walls) {\r\n    let node = grid[wall[0]][wall[1]];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: true,\r\n    };\r\n    newGrid[wall[0]][wall[1]] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithoutPath = (grid) => {\r\n  let newGrid = grid.slice();\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      let newNode = {\r\n        ...node,\r\n        distance: Infinity,\r\n        totalDistance: Infinity,\r\n        isVisited: false,\r\n        isShortest: false,\r\n        previousNode: null,\r\n        distanceToFinishNode: Math.abs(finishNodeRow - node.row) + Math.abs(finishNodeCol - node.col)   ///\r\n      };\r\n      newGrid[node.row][node.col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst updateNodesForRender = (\r\n  grid,\r\n  nodesInShortestPathOrder,\r\n  visitedNodesInOrder\r\n) => {\r\n  let newGrid = grid.slice();\r\n  for (let node of visitedNodesInOrder) {\r\n    if (\r\n      (node.row === startNodeRow && node.col === startNodeCol) ||\r\n      (node.row === finishNodeRow && node.col === finishNodeCol)\r\n    )\r\n      continue;\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n  for (let node of nodesInShortestPathOrder) {\r\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\r\n      return newGrid;\r\n    }\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: false,\r\n      isShortest: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n};\r\n\r\nconst getVisitedNodesInOrder = (\r\n  visitedNodesInOrderStart,\r\n  visitedNodesInOrderFinish\r\n) => {\r\n  let visitedNodesInOrder = [];\r\n  let n = Math.max(\r\n    visitedNodesInOrderStart.length,\r\n    visitedNodesInOrderFinish.length\r\n  );\r\n  for (let i = 0; i < n; i++) {\r\n    if (visitedNodesInOrderStart[i] !== undefined) {\r\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\r\n    }\r\n    if (visitedNodesInOrderFinish[i] !== undefined) {\r\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n};\r\n\r\n// updating the grid, when the walls are tiggered\r\nconst gridWithWallToggled = (grid, row, col) => {\r\n  let newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  \r\n  return newGrid;\r\n};\r\n\r\n//nothing just change global variable to let to change according the user\r\nconst gridDynamicNodes = (grid, row, col, pos) => {\r\n  console.log(`${pos} node is currently at: row: ${row} col: ${col}`);\r\n  let newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (pos === \"start\") {\r\n    const newNode = {\r\n      ...node,\r\n      isStart: true,\r\n    };\r\n    startNodeRow = row;\r\n    startNodeCol = col;\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  if (pos === \"finish\") {\r\n    const newNode = {\r\n      ...node,\r\n      isFinish: true,\r\n    };\r\n    finishNodeRow = row;\r\n    finishNodeCol = col;\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  console.log(`startFinishNode: ${startNodeRow} ${startNodeCol} ${finishNodeRow} ${finishNodeCol}`);\r\n\r\n  return newGrid;\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n","export function randomMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let walls = [];\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      if (\r\n        (row === startNode.row && col === startNode.col) ||\r\n        (row === finishNode.row && col === finishNode.col)\r\n      )\r\n        continue;\r\n      if (Math.random() < 0.33) {\r\n        walls.push([row, col]);\r\n      }\r\n    }\r\n  }\r\n  walls.sort(() => Math.random() - 0.5);\r\n  return walls;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/js/dist/dropdown\";\r\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PathfindingVisualizer />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}